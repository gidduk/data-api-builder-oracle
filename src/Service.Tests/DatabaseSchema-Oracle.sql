-- Copyright (c) Microsoft Corporation.
-- Licensed under the MIT License.

-- Drop objects if they exist (Oracle 23ai+ syntax)
DROP VIEW IF EXISTS books_view_all;
DROP VIEW IF EXISTS books_view_with_mapping;
DROP VIEW IF EXISTS stocks_view_selected;
DROP VIEW IF EXISTS books_publishers_view_composite;
DROP VIEW IF EXISTS books_publishers_view_composite_insertable;
DROP TABLE IF EXISTS book_author_link;
DROP TABLE IF EXISTS book_author_link_mm;
DROP TABLE IF EXISTS reviews;
DROP TABLE IF EXISTS reviews_mm;
DROP TABLE IF EXISTS authors CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS authors_mm;
DROP TABLE IF EXISTS book_website_placements;
DROP TABLE IF EXISTS website_users;
DROP TABLE IF EXISTS website_users_mm;
DROP TABLE IF EXISTS books CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS books_mm;
DROP TABLE IF EXISTS players;
DROP TABLE IF EXISTS clubs;
DROP TABLE IF EXISTS publishers;
DROP TABLE IF EXISTS publishers_mm;
DROP TABLE IF EXISTS foo_magazines;
DROP TABLE IF EXISTS bar_magazines;
DROP TABLE IF EXISTS stocks_price;
DROP TABLE IF EXISTS stocks;
DROP TABLE IF EXISTS comics;
DROP TABLE IF EXISTS brokers;
DROP TABLE IF EXISTS type_table;
DROP TABLE IF EXISTS trees;
DROP TABLE IF EXISTS fungi;
DROP TABLE IF EXISTS empty_table;
DROP TABLE IF EXISTS notebooks;
DROP TABLE IF EXISTS journals;
DROP TABLE IF EXISTS aow;
DROP TABLE IF EXISTS series;
DROP TABLE IF EXISTS sales;
DROP TABLE IF EXISTS authors_history;
DROP TABLE IF EXISTS revenues;
DROP TABLE IF EXISTS graphql_incompatible;
DROP TABLE IF EXISTS GQLmappings;
DROP TABLE IF EXISTS bookmarks;
DROP TABLE IF EXISTS mappedbookmarks;
DROP TABLE IF EXISTS fte_data;
DROP TABLE IF EXISTS intern_data;
DROP TABLE IF EXISTS books_sold;
DROP TABLE IF EXISTS default_with_function_table;
DROP TABLE IF EXISTS DimAccount;
DROP TABLE IF EXISTS date_only_table;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS user_profiles;
DROP TABLE IF EXISTS default_books;

-- Tables

CREATE TABLE publishers (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name VARCHAR2(4000) NOT NULL
);

CREATE TABLE publishers_mm (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name VARCHAR2(4000) NOT NULL
);

CREATE TABLE books (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    title VARCHAR2(4000) NOT NULL,
    publisher_id NUMBER NOT NULL
);

CREATE TABLE books_mm (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    title VARCHAR2(4000) NOT NULL,
    publisher_id NUMBER NOT NULL
);

CREATE TABLE players (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name VARCHAR2(4000) NOT NULL,
    current_club_id NUMBER NOT NULL,
    new_club_id NUMBER NOT NULL
);

CREATE TABLE clubs (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name VARCHAR2(4000) NOT NULL
);

CREATE TABLE book_website_placements (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    book_id NUMBER UNIQUE NOT NULL,
    price NUMBER NOT NULL
);

CREATE TABLE website_users (
    id NUMBER PRIMARY KEY,
    username VARCHAR2(4000)
);

CREATE TABLE website_users_mm (
    id NUMBER PRIMARY KEY,
    username VARCHAR2(4000)
);

CREATE TABLE authors (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name VARCHAR2(4000) NOT NULL,
    birthdate VARCHAR2(4000) NOT NULL
);

CREATE TABLE authors_mm (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name VARCHAR2(4000) NOT NULL,
    birthdate VARCHAR2(4000) NOT NULL
);

CREATE TABLE reviews (
    book_id NUMBER,
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1),
    content VARCHAR2(4000) DEFAULT 'Its a classic' NOT NULL,
    websiteuser_id NUMBER DEFAULT 1,
    PRIMARY KEY (book_id, id)
);

CREATE TABLE reviews_mm (
    book_id NUMBER,
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1),
    content VARCHAR2(4000) DEFAULT 'Its a classic' NOT NULL,
    websiteuser_id NUMBER DEFAULT 1,
    PRIMARY KEY (book_id, id)
);

CREATE TABLE book_author_link (
    book_id NUMBER NOT NULL,
    author_id NUMBER NOT NULL,
    royalty_percentage FLOAT DEFAULT 0,
    PRIMARY KEY (book_id, author_id)
);

CREATE TABLE book_author_link_mm (
    book_id NUMBER NOT NULL,
    author_id NUMBER NOT NULL,
    royalty_percentage FLOAT DEFAULT 0,
    PRIMARY KEY (book_id, author_id)
);

CREATE TABLE foo_magazines (
    id NUMBER PRIMARY KEY,
    title VARCHAR2(4000) NOT NULL,
    issue_number NUMBER
);

CREATE TABLE bar_magazines (
    upc NUMBER PRIMARY KEY,
    comic_name VARCHAR2(4000) NOT NULL,
    issue NUMBER
);

CREATE TABLE comics (
    id NUMBER PRIMARY KEY,
    title VARCHAR2(4000) NOT NULL,
    volume NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1),
    categoryName VARCHAR2(100) NOT NULL UNIQUE,
    series_id NUMBER
);

CREATE TABLE stocks (
    categoryid NUMBER NOT NULL,
    pieceid NUMBER NOT NULL,
    categoryName VARCHAR2(100) NOT NULL,
    piecesAvailable NUMBER DEFAULT 0,
    piecesRequired NUMBER DEFAULT 0 NOT NULL,
    PRIMARY KEY (categoryid, pieceid)
);

CREATE TABLE stocks_price (
    categoryid NUMBER NOT NULL,
    pieceid NUMBER NOT NULL,
    instant TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    price FLOAT,
    is_wholesale_price NUMBER(1),
    PRIMARY KEY (categoryid, pieceid, instant)
);

CREATE TABLE brokers (
    "ID NUMBER" NUMBER PRIMARY KEY,
    "FIRST NAME" VARCHAR2(4000) NOT NULL,
    "LAST NAME" VARCHAR2(4000) NOT NULL
);

CREATE TABLE type_table (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    byte_types NUMBER(3),
    short_types NUMBER(5),
    int_types NUMBER(10),
    long_types NUMBER(19),
    string_types VARCHAR2(4000),
    nvarchar_string_types NVARCHAR2(2000),
    single_types BINARY_FLOAT,
    float_types BINARY_DOUBLE,
    decimal_types NUMBER(38, 19),
    boolean_types NUMBER(1),
    date_types DATE,
    datetime_types TIMESTAMP,
    datetime2_types TIMESTAMP,
    datetimeoffset_types TIMESTAMP WITH TIME ZONE,
    smalldatetime_types TIMESTAMP,
    time_types INTERVAL DAY TO SECOND,
    bytearray_types RAW(2000),
    uuid_types RAW(16) DEFAULT SYS_GUID()
);

CREATE TABLE trees (
    treeId NUMBER PRIMARY KEY,
    species VARCHAR2(4000),
    region VARCHAR2(4000),
    height VARCHAR2(4000)
);

CREATE TABLE fungi (
    speciesid NUMBER PRIMARY KEY,
    region VARCHAR2(4000),
    habitat VARCHAR2(6)
);

CREATE TABLE empty_table (
    id NUMBER PRIMARY KEY
);

CREATE TABLE notebooks (
    id NUMBER PRIMARY KEY,
    notebookname VARCHAR2(4000),
    color VARCHAR2(4000),
    ownername VARCHAR2(4000)
);

CREATE TABLE journals (
    id NUMBER PRIMARY KEY,
    journalname VARCHAR2(4000),
    color VARCHAR2(4000),
    ownername VARCHAR2(4000)
);

CREATE TABLE aow (
    NoteNum NUMBER PRIMARY KEY,
    DetailAssessmentAndPlanning VARCHAR2(4000),
    WagingWar VARCHAR2(4000),
    StrategicAttack VARCHAR2(4000)
);

CREATE TABLE series (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    name NVARCHAR2(1000) NOT NULL
);

CREATE TABLE sales (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    item_name VARCHAR2(4000) NOT NULL,
    subtotal NUMBER(18,2) NOT NULL,
    tax NUMBER(18,2) NOT NULL,
    total NUMBER(18,2) GENERATED ALWAYS AS (subtotal + tax) VIRTUAL
);

CREATE TABLE authors_history (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    first_name VARCHAR2(100) NOT NULL,
    middle_name VARCHAR2(100),
    last_name VARCHAR2(100) NOT NULL,
    year_of_publish NUMBER,
    books_published NUMBER
);

CREATE TABLE revenues (
    id NUMBER PRIMARY KEY,
    category VARCHAR2(4000) NOT NULL,
    revenue NUMBER,
    accessible_role VARCHAR2(4000) NOT NULL
);

CREATE TABLE graphql_incompatible (
    typeName NUMBER PRIMARY KEY,
    conformingName VARCHAR2(12)
);

CREATE TABLE GQLmappings (
    column1 NUMBER PRIMARY KEY,
    column2 VARCHAR2(4000),
    column3 VARCHAR2(4000)
);

CREATE TABLE bookmarks (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    bkname NVARCHAR2(1000) NOT NULL
);

CREATE TABLE mappedbookmarks (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    bkname NVARCHAR2(50) NOT NULL
);

CREATE TABLE fte_data (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1),
    u_id NUMBER DEFAULT 2,
    name VARCHAR2(50),
    position VARCHAR2(20),
    salary NUMBER DEFAULT 20,
    PRIMARY KEY (id, u_id)
);

CREATE TABLE intern_data (
    id NUMBER,
    months NUMBER DEFAULT 2 NOT NULL,
    name VARCHAR2(50),
    salary NUMBER DEFAULT 15,
    PRIMARY KEY (id, months)
);

CREATE TABLE books_sold (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    book_name      VARCHAR2(50),
    row_version    RAW(8),
    copies_sold    NUMBER DEFAULT 0,
    last_sold_on   TIMESTAMP(7) DEFAULT TO_TIMESTAMP('1999-01-08 10:23:54', 'YYYY-MM-DD HH24:MI:SS'),
    last_sold_on_date DATE GENERATED ALWAYS AS (TRUNC(last_sold_on))
);

CREATE TABLE default_with_function_table (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    user_value NUMBER,
    current_date DATE DEFAULT SYSDATE NOT NULL,
    current_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    random_number NUMBER, -- No default here
    next_date DATE DEFAULT (TRUNC(SYSDATE) + 1) NOT NULL,
    default_string_with_parenthesis VARCHAR2(100) DEFAULT '()',
    default_function_string_with_parenthesis VARCHAR2(100) DEFAULT 'NOW()',
    default_integer NUMBER DEFAULT 100,
    default_date_string DATE DEFAULT TO_DATE('1999-01-08 10:23:54', 'YYYY-MM-DD HH24:MI:SS')
);

CREATE OR REPLACE TRIGGER trg_default_with_function_table_random
BEFORE INSERT ON default_with_function_table
FOR EACH ROW
BEGIN
    IF :NEW.random_number IS NULL THEN
        :NEW.random_number := DBMS_RANDOM.VALUE;
    END IF;
END;
/

CREATE TABLE DimAccount (
    AccountKey NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY,
    ParentAccountKey NUMBER
);

CREATE TABLE users (
    userid NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    username NVARCHAR2(50) UNIQUE,
    email NVARCHAR2(100)
);

CREATE TABLE user_profiles (
    profileid NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    username NVARCHAR2(50) UNIQUE,
    profilepictureurl NVARCHAR2(255),
    userid NUMBER
);

CREATE TABLE default_books (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY (START WITH 5001 INCREMENT BY 1) PRIMARY KEY,
    title NVARCHAR2(100) DEFAULT 'Placeholder'
);

CREATE TABLE date_only_table (
    event_date DATE NOT NULL,
    event_time INTERVAL DAY TO SECOND NOT NULL,
    event_timestamp TIMESTAMP NOT NULL
);

-- Foreign Keys

ALTER TABLE books ADD CONSTRAINT book_publisher_fk FOREIGN KEY (publisher_id) REFERENCES publishers(id) ON DELETE CASCADE;
ALTER TABLE books_mm ADD CONSTRAINT book_mm_publisher_fk FOREIGN KEY (publisher_id) REFERENCES publishers_mm(id) ON DELETE CASCADE;
ALTER TABLE players ADD CONSTRAINT player_club_fk FOREIGN KEY (current_club_id) REFERENCES clubs(id) ON DELETE CASCADE;
ALTER TABLE book_website_placements ADD CONSTRAINT book_website_placement_book_fk FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE;
ALTER TABLE reviews ADD CONSTRAINT review_book_fk FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE;
ALTER TABLE book_author_link ADD CONSTRAINT book_author_link_book_fk FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE;
ALTER TABLE book_author_link ADD CONSTRAINT book_author_link_author_fk FOREIGN KEY (author_id) REFERENCES authors(id) ON DELETE CASCADE;
ALTER TABLE stocks ADD CONSTRAINT stocks_comics_fk FOREIGN KEY (categoryName) REFERENCES comics(categoryName) ON DELETE CASCADE;
ALTER TABLE stocks_price ADD CONSTRAINT stocks_price_stocks_fk FOREIGN KEY (categoryid, pieceid) REFERENCES stocks(categoryid, pieceid) ON DELETE CASCADE;
ALTER TABLE comics ADD CONSTRAINT comics_series_fk FOREIGN KEY (series_id) REFERENCES series(id) ON DELETE CASCADE;
ALTER TABLE DimAccount ADD CONSTRAINT FK_DimAccount_DimAccount FOREIGN KEY (ParentAccountKey) REFERENCES DimAccount(AccountKey);

-- Note: For schemas [foo] and [bar], Oracle recommends using separate users or using table prefixes as above (foo_magazines, bar_magazines).
-- If you want to use Oracle schemas, use: CREATE TABLE foo.magazines (...);

-- For triggers, views, and procedures, please request specifically as needed.

INSERT INTO publishers(id, name) VALUES (1234, 'Big Company'), (2345, 'Small Town Publisher'), (2323, 'TBD Publishing One'), (2324, 'TBD Publishing Two Ltd'), (1940, 'Policy Publisher 01'), (1941, 'Policy Publisher 02'), (1156, 'The First Publisher');

INSERT INTO publishers_mm(id, name) VALUES (1234, 'Big Company'), (2345, 'Small Town Publisher'), (2323, 'TBD Publishing One'), (2324, 'TBD Publishing Two Ltd'), (1940, 'Policy Publisher 01'), (1941, 'Policy Publisher 02'), (1156, 'The First Publisher');

INSERT INTO clubs(id, name) VALUES (1111, 'Manchester United'), (1112, 'FC Barcelona'), (1113, 'Real Madrid');

INSERT INTO authors(id, name, birthdate) VALUES (123, 'Jelte', '2001-01-01'), (124, 'Aniruddh', '2002-02-02'), (125, 'Aniruddh', '2001-01-01'), (126, 'Aaron', '2001-01-01');

INSERT INTO authors_mm(id, name, birthdate) VALUES (123, 'Jelte', '2001-01-01'), (124, 'Aniruddh', '2002-02-02'), (125, 'Aniruddh', '2001-01-01'), (126, 'Aaron', '2001-01-01');

INSERT INTO GQLmappings(column1, column2, column3) VALUES (1, 'Incompatible GraphQL Name', 'Compatible GraphQL Name');
INSERT INTO GQLmappings(column1, column2, column3) VALUES (3, 'Old Value', 'Record to be Updated');
INSERT INTO GQLmappings(column1, column2, column3) VALUES (4, 'Lost Record', 'Record to be Deleted');
INSERT INTO GQLmappings(column1, column2, column3) VALUES (5, 'Filtered Record', 'Record to be Filtered on Find');

DECLARE
    v_upper_bound INT := 10000;
BEGIN
    INSERT INTO bookmarks (id, bkname)
    SELECT
        level AS id,
        'Test Item #' || TO_CHAR(level, 'FM00000') AS bkname
    FROM
        DUAL
    CONNECT BY
        level <= v_upper_bound;

    COMMIT; -- Commit the changes
END;
/

DECLARE
    v_upper_bound INT := 10000;
BEGIN
    INSERT INTO mappedbookmarks (id, bkname)
    SELECT
        level AS id,
        'Test Item #' || TO_CHAR(level, 'FM00000') AS bkname
    FROM
        DUAL
    CONNECT BY
        level <= v_upper_bound;

    COMMIT; -- Commit the changes to make them permanent
END;
/

INSERT INTO books(id, title, publisher_id)
VALUES (1, 'Awesome book', 1234),
(2, 'Also Awesome book', 1234),
(3, 'Great wall of china explained', 2345),
(4, 'US history in a nutshell', 2345),
(5, 'Chernobyl Diaries', 2323),
(6, 'The Palace Door', 2324),
(7, 'The Groovy Bar', 2324),
(8, 'Time to Eat', 2324),
(9, 'Policy-Test-01', 1940),
(10, 'Policy-Test-02', 1940),
(11, 'Policy-Test-04', 1941),
(12, 'Time to Eat 2', 1941),
(13, 'Before Sunrise', 1234),
(14, 'Before Sunset', 1234),
(15, 'SQL_CONN', 1234),
(16, 'SOME%CONN', 1234),
(17, 'CONN%_CONN', 1234),
(18, '[Special Book]', 1234),
(19, 'ME\YOU', 1234),
(20, 'C:\\LIFE', 1234);

INSERT INTO books_mm(id, title, publisher_id)
VALUES (1, 'Awesome book', 1234),
(2, 'Also Awesome book', 1234),
(3, 'Great wall of china explained', 2345),
(4, 'US history in a nutshell', 2345),
(5, 'Chernobyl Diaries', 2323),
(6, 'The Palace Door', 2324),
(7, 'The Groovy Bar', 2324),
(8, 'Time to Eat', 2324),
(9, 'Policy-Test-01', 1940),
(10, 'Policy-Test-02', 1940),
(11, 'Policy-Test-04', 1941),
(12, 'Time to Eat 2', 1941),
(13, 'Before Sunrise', 1234),
(14, 'Before Sunset', 1234),
(15, 'SQL_CONN', 1234),
(16, 'SOME%CONN', 1234),
(17, 'CONN%_CONN', 1234),
(18, '[Special Book]', 1234),
(19, 'ME\YOU', 1234),
(20, 'C:\\LIFE', 1234);

INSERT INTO players(id, name, current_club_id, new_club_id)
VALUES (1, 'Cristiano Ronaldo', 1113, 1111),
(2, 'Leonel Messi', 1112, 1113);

INSERT INTO book_website_placements(id, book_id, price) VALUES (1, 1, 100), (2, 2, 50), (3, 3, 23), (4, 5, 33);

INSERT INTO book_author_link(book_id, author_id) VALUES (1, 123), (2, 124), (3, 123), (3, 124), (4, 123), (4, 124), (5, 126);
INSERT INTO book_author_link_mm(book_id, author_id) VALUES (1, 123), (2, 124), (3, 123), (3, 124), (4, 123), (4, 124), (5, 126);

INSERT INTO website_users(id, username) VALUES (1, 'George'), (2, NULL), (3, ''), (4, 'book_lover_95'), (5, 'null');
INSERT INTO website_users_mm(id, username) VALUES (1, 'George'), (2, NULL), (3, ''), (4, 'book_lover_95'), (5, 'null');

INSERT INTO reviews(id, book_id, content) VALUES (567, 1, 'Indeed a great book'), (568, 1, 'I loved it'), (569, 1, 'best book I read in years');

INSERT INTO reviews_mm(id, book_id, content) VALUES (567, 1, 'Indeed a great book'), (568, 1, 'I loved it'), (569, 1, 'best book I read in years');

INSERT INTO type_table (
    id, byte_types, short_types, int_types, long_types,
    string_types, nvarchar_string_types,
    single_types, float_types, decimal_types,
    boolean_types,
    date_types, datetime_types, datetime2_types, datetimeoffset_types, smalldatetime_types, time_types,
    bytearray_types
) VALUES
(
    1, 1, 1, 1, 1, '', '', 0.33, 0.33, 0.333333, 1,
    TO_DATE('1999-01-08', 'YYYY-MM-DD'),
    TO_TIMESTAMP('1999-01-08 10:23:54', 'YYYY-MM-DD HH24:MI:SS'),
    TO_TIMESTAMP('1999-01-08 10:23:54.9999999', 'YYYY-MM-DD HH24:MI:SS.FF7'),
    TO_TIMESTAMP_TZ('1999-01-08 10:23:54.9999999-14:00', 'YYYY-MM-DD HH24:MI:SS.FF7TZH:TZM'),
    TO_TIMESTAMP('1999-01-08 10:23:54', 'YYYY-MM-DD HH24:MI:SS'),
    TO_DSINTERVAL('0 10:23:54.9999999'),
    HEXTORAW('ABCDEF0123')
),
(
    2, 0, -1, -1, -1, 'lksa;jdflasdf;alsdflksdfkldj', 'lksa;jdflasdf;alsdflksdfkldj', -9.2, -9.2, -9.292929, 0,
    TO_DATE('1999-01-08', 'YYYY-MM-DD'),
    TO_TIMESTAMP('1999-01-08 10:23:00', 'YYYY-MM-DD HH24:MI:SS'),
    TO_TIMESTAMP('1999-01-08 10:23:00.9999999', 'YYYY-MM-DD HH24:MI:SS.FF7'),
    TO_TIMESTAMP_TZ('1999-01-08 10:23:00.9999999+13:00', 'YYYY-MM-DD HH24:MI:SS.FF7TZH:TZM'),
    TO_TIMESTAMP('1999-01-08 10:23:00', 'YYYY-MM-DD HH24:MI:SS'),
    TO_DSINTERVAL('0 10:23:00.9999999'),
    HEXTORAW('98AB7511AABB1234')
),
(
    3, 0, -32768, -2147483648, -9223372036854775808, 'null', 'null', -3.4E38, -1.7E108, 2.929292E-19, 1,
    TO_DATE('0001-01-01', 'YYYY-MM-DD'),
    TO_TIMESTAMP('1753-01-01 00:00:00.000', 'YYYY-MM-DD HH24:MI:SS.FF3'),
    TO_TIMESTAMP('0001-01-01 00:00:00.0000000', 'YYYY-MM-DD HH24:MI:SS.FF7'),
    TO_TIMESTAMP_TZ('0001-01-01 00:00:00.0000000+0:00', 'YYYY-MM-DD HH24:MI:SS.FF7TZH:TZM'),
    TO_TIMESTAMP('1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),
    TO_DSINTERVAL('0 00:00:00.0000000'),
    HEXTORAW('00000000')
),
(
    4, 255, 32767, 2147483647, 9223372036854775807, 'null', 'null', 3.4E38, 1.7E108, 2.929292E-14, 1,
    TO_DATE('9999-12-31', 'YYYY-MM-DD'),
    TO_TIMESTAMP('9999-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS'),
    TO_TIMESTAMP('9999-12-31 23:59:59.9999999', 'YYYY-MM-DD HH24:MI:SS.FF7'),
    TO_TIMESTAMP_TZ('9999-12-31 23:59:59.9999999+14:00', 'YYYY-MM-DD HH24:MI:SS.FF7TZH:TZM'),
    TO_TIMESTAMP('2079-06-06 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),
    TO_DSINTERVAL('0 23:59:59.9999999'),
    HEXTORAW('FFFFFFFF')
),
(
    5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
);

INSERT INTO type_table(id, uuid_types) values(10, 'D1D021A847B44AE4B71898E89C41A161');

INSERT INTO sales(id, item_name, subtotal, tax) VALUES (1, 'Watch', 249.00, 20.59), (2, 'Montior', 120.50, 11.12);

INSERT INTO notebooks(id, notebookname, color, ownername) VALUES (1, 'Notebook1', 'red', 'Sean'), (2, 'Notebook2', 'green', 'Ani'), (3, 'Notebook3', 'blue', 'Jarupat'), (4, 'Notebook4', 'yellow', 'Aaron');

INSERT INTO journals(id, journalname, color, ownername)
VALUES
    (1, 'Journal1', 'red', 'Sean'),
    (2, 'Journal2', 'green', 'Ani'),
    (3, 'Journal3', 'blue', 'Jarupat'),
    (4, 'Journal4', 'yellow', 'Aaron'),
    (5, 'Journal5', null, 'Abhishek'),
    (6, 'Journal6', 'green', null),
    (7, 'Journal7', null, null);
	
INSERT INTO foo_magazines(id, title, issue_number) VALUES (1, 'Vogue', 1234), (11, 'Sports Illustrated', NULL), (3, 'Fitness', NULL);
INSERT INTO bar_magazines(upc, comic_name, issue) VALUES (0, 'NotVogue', 0);
INSERT INTO brokers("ID NUMBER", "FIRST NAME", "LAST NAME") VALUES (1, 'Michael', 'Burry'), (2, 'Jordan', 'Belfort');

INSERT INTO series(id, name) VALUES (3001, 'Foundation'), (3002, 'Hyperion Cantos');

INSERT INTO comics(id, title, categoryName, series_id)
VALUES (1, 'Star Trek', 'SciFi', NULL), (2, 'Cinderella', 'Tales', 3001),(3,'Únknown',' ', 3002), (4, 'Alexander the Great', 'Historical', NULL),
(5, 'Snow White', 'AnotherTales', 3001);
INSERT INTO stocks(categoryid, pieceid, categoryName) VALUES (1, 1, 'SciFi'), (2, 1, 'Tales'),(0,1,' '),(100, 99, 'Historical');
INSERT INTO stocks_price(categoryid, pieceid, price, is_wholesale_price) VALUES (2, 1, 100.57, 1), (1, 1, 42.75, 0), (100, 99, NULL, NULL);
INSERT INTO stocks_price(categoryid, pieceid, instant, price, is_wholesale_price) VALUES (2, 1, TO_TIMESTAMP('2023-08-21 15:11:04', 'YYYY-MM-DD HH24:MI:SS'), 100.57, 1);
INSERT INTO trees(treeId, species, region, height) VALUES (1, 'Tsuga terophylla', 'Pacific Northwest', '30m'), (2, 'Pseudotsuga menziesii', 'Pacific Northwest', '40m');
INSERT INTO trees(treeId, species, region, height) VALUES (4, 'test', 'Pacific Northwest', '0m');
INSERT INTO aow(NoteNum, DetailAssessmentAndPlanning, WagingWar, StrategicAttack) VALUES (1, 'chapter one notes: ', 'chapter two notes: ', 'chapter three notes: ');
INSERT INTO fungi(speciesid, region, habitat) VALUES (1, 'northeast', 'forest'), (2, 'southwest', 'sand');
INSERT INTO fungi(speciesid, region, habitat) VALUES (3, 'northeast', 'test');

INSERT INTO authors_history(id, first_name, middle_name, last_name, year_of_publish, books_published)
VALUES
(1, 'Isaac', null, 'Asimov', 1993, 6),
(2, 'Robert', 'A.', 'Heinlein', 1886, null),
(3, 'Robert', null, 'Silvenberg', null, null),
(4, 'Dan', null, 'Simmons', 1759, 3),
(5, 'Isaac', null, 'Asimov', 2000, null),
(6, 'Robert', 'A.', 'Heinlein', 1899, 2),
(7, 'Isaac', null, 'Silvenberg', 1664, null),
(8, 'Dan', null, 'Simmons', 1799, 3),
(9, 'Aaron', null, 'Mitchells', 2001, 1),
(10, 'Aaron', 'F.', 'Burtle', null, null)

insert into fte_data(id, name, position, salary) values(1, 'Ellie', 'Junior Dev', 20), (2, 'Chris', 'Senior Dev', 40);

insert into intern_data(id, months, name) values(1, 3, 'Tess'), (2, 4, 'Frank');


INSERT INTO revenues(id, category, revenue, accessible_role) VALUES (1, 'Book', 5000, 'Anonymous'), (2, 'Comics', 10000, 'Anonymous'),
(3, 'Journals', 20000, 'Authenticated'), (4, 'Series', 40000, 'Authenticated');

INSERT INTO books_sold(id, book_name, last_sold_on) values(1, 'Awesome Book', sysdate);

INSERT INTO users (username, email) VALUES ('john_doe', 'john.doe@example.com'), ('jane_smith', 'jane.smith@example.com');
INSERT INTO user_profiles (username, profilepictureurl, userid) VALUES ('john_doe', 'https://example.com/profiles/john_doe.jpg', 1), ('jane_smith', 'https://example.com/profiles/jane_smith.jpg', 2);

INSERT INTO DimAccount(AccountKey, ParentAccountKey)
VALUES (1, null),
(2, 1),
(3, 2),
(4, 2);

INSERT INTO date_only_table(event_date, event_time, event_timestamp) 
VALUES 
    (DATE '2023-01-01', 
     INTERVAL '8:30:00' HOUR TO SECOND, 
     TIMESTAMP '2023-01-01 08:30:00'),
    (DATE '2023-02-15', 
     INTERVAL '12:45:00' HOUR TO SECOND, 
     TIMESTAMP '2023-02-15 12:45:00'),
    (DATE '2023-03-30', 
     INTERVAL '17:15:00' HOUR TO SECOND, 
     TIMESTAMP '2023-03-30 17:15:00');

CREATE OR REPLACE VIEW books_view_all AS 
SELECT * FROM books;

CREATE OR REPLACE VIEW books_view_with_mapping AS 
SELECT * FROM books;

CREATE OR REPLACE VIEW stocks_view_selected AS 
SELECT 
    categoryid,
    pieceid,
    categoryName,
    piecesAvailable
FROM stocks;

-- Composite views using modern JOIN syntax (Oracle 23ai enhanced)
CREATE OR REPLACE VIEW books_publishers_view_composite AS 
SELECT 
    p.name,
    b.id, 
    b.title, 
    p.id AS pub_id
FROM books b
INNER JOIN publishers p ON p.id = b.publisher_id;

CREATE OR REPLACE VIEW books_publishers_view_composite_insertable AS 
SELECT 
    b.id, 
    b.title, 
    p.name, 
    b.publisher_id
FROM books b
INNER JOIN publishers p ON p.id = b.publisher_id;

-- =====================================================
-- Stored Procedures using Oracle 23ai Enhanced Features
-- =====================================================

-- Simple SELECT procedures using SQL Macros (Oracle 23ai feature)
CREATE OR REPLACE FUNCTION get_book_by_id(p_id NUMBER) 
RETURN VARCHAR2 SQL_MACRO IS
BEGIN
    RETURN 'SELECT * FROM books WHERE id = get_book_by_id.p_id';
END;
/

CREATE OR REPLACE FUNCTION get_publisher_by_id(p_id NUMBER) 
RETURN VARCHAR2 SQL_MACRO IS
BEGIN
    RETURN 'SELECT * FROM publishers WHERE id = get_publisher_by_id.p_id';
END;
/

-- Traditional procedures for complex operations
CREATE OR REPLACE PROCEDURE get_books AS
BEGIN
    FOR rec IN (SELECT * FROM books) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id || ', Title: ' || rec.title);
    END LOOP;
END;
/

-- Insert procedure with Oracle 23ai error handling enhancements
CREATE OR REPLACE PROCEDURE insert_book(
    p_title VARCHAR2,
    p_publisher_id NUMBER
) AS
BEGIN
    INSERT INTO books(title, publisher_id) 
    VALUES (p_title, p_publisher_id);
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Count procedure using Oracle 23ai aggregate enhancements
CREATE OR REPLACE FUNCTION count_books 
RETURN NUMBER IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM books;
    RETURN v_count;
END;
/

-- Delete procedure with Oracle 23ai enhanced window functions
CREATE OR REPLACE PROCEDURE delete_last_inserted_book AS
    v_max_id NUMBER;
BEGIN
    SELECT MAX(id) INTO v_max_id FROM books;
    
    DELETE FROM books WHERE id = v_max_id;
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No books found to delete');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Update procedure with Oracle 23ai enhanced features
CREATE OR REPLACE PROCEDURE update_book_title(
    p_id NUMBER,
    p_title VARCHAR2
) AS
    TYPE book_rec_type IS RECORD (
        id NUMBER,
        title VARCHAR2(4000),
        publisher_id NUMBER
    );
    v_book book_rec_type;
BEGIN
    UPDATE books 
    SET title = p_title 
    WHERE id = p_id;
    
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No book found with ID: ' || p_id);
    END IF;
    
    -- Return updated record
    SELECT id, title, publisher_id 
    INTO v_book.id, v_book.title, v_book.publisher_id
    FROM books 
    WHERE id = p_id;
    
    DBMS_OUTPUT.PUT_LINE('Updated Book - ID: ' || v_book.id || 
                        ', Title: ' || v_book.title || 
                        ', Publisher ID: ' || v_book.publisher_id);
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Book not found after update');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- Complex aggregation procedure using Oracle 23ai enhanced string functions
CREATE OR REPLACE PROCEDURE get_authors_history_by_first_name(
    p_firstName VARCHAR2
) AS
    CURSOR c_authors IS
        SELECT 
            CONCAT(
                first_name, 
                CONCAT(' ', 
                    CONCAT(NVL(middle_name || ' ', ''), last_name)
                )
            ) AS author_name,
            MIN(year_of_publish) AS first_publish_year,
            SUM(books_published) AS total_books_published
        FROM authors_history
        WHERE first_name = p_firstName
        GROUP BY CONCAT(
            first_name, 
            CONCAT(' ', 
                CONCAT(NVL(middle_name || ' ', ''), last_name)
            )
        );
BEGIN
    FOR rec IN c_authors LOOP
        DBMS_OUTPUT.PUT_LINE('Author: ' || rec.author_name || 
                           ', First Published: ' || rec.first_publish_year ||
                           ', Total Books: ' || rec.total_books_published);
    END LOOP;
END;
/

-- Complex procedure with transaction control using Oracle 23ai features
CREATE OR REPLACE PROCEDURE insert_and_display_all_books_for_given_publisher(
    p_title VARCHAR2,
    p_publisher_name VARCHAR2
) AS
    v_publisher_id NUMBER;
    
    CURSOR c_books IS
        SELECT * FROM books WHERE publisher_id = v_publisher_id;
BEGIN
    -- Get publisher ID with enhanced error handling
    BEGIN
        SELECT id INTO v_publisher_id 
        FROM publishers 
        WHERE name = p_publisher_name;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20003, 'Publisher not found: ' || p_publisher_name);
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20004, 'Multiple publishers found with name: ' || p_publisher_name);
    END;
    
    -- Insert new book
    INSERT INTO books(title, publisher_id)
    VALUES(p_title, v_publisher_id);
    
    -- Display all books for the publisher
    DBMS_OUTPUT.PUT_LINE('Books for publisher: ' || p_publisher_name);
    DBMS_OUTPUT.PUT_LINE('----------------------------------------');
    
    FOR rec IN c_books LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id || 
                           ', Title: ' || rec.title || 
                           ', Publisher ID: ' || rec.publisher_id);
    END LOOP;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        RAISE;
END;
/

---- Triggers

CREATE OR REPLACE TRIGGER intern_data_before_insert_trg
BEFORE INSERT ON intern_data
FOR EACH ROW
BEGIN
    IF :NEW.salary > 30 THEN
        :NEW.salary := 30;
    ELSIF :NEW.salary < 0 THEN
        :NEW.salary := 0;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER fte_data_before_update_trg
BEFORE UPDATE ON fte_data
FOR EACH ROW
BEGIN
    IF :NEW.salary > 150 THEN
        :NEW.salary := 150;
    ELSIF :NEW.salary < 0 THEN
        :NEW.salary := 0;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER intern_data_before_insert_trg
BEFORE INSERT ON intern_data
FOR EACH ROW
BEGIN
    IF :NEW.salary > 30 THEN
        :NEW.salary := 30;
    ELSIF :NEW.salary < 0 THEN
        :NEW.salary := 0;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER intern_data_before_update_trg
BEFORE UPDATE ON intern_data
FOR EACH ROW
BEGIN
    IF :NEW.salary > 50 THEN
        :NEW.salary := 50;
    ELSIF :NEW.salary < 0 THEN
        :NEW.salary := 0;
    END IF;
END;
/
